// CONFIGURACIÓN DE FIREBASE 
// Configuración para conectar con Firebase
const firebaseConfig = {
    apiKey: "AIzaSy...",
    authDomain: "alpharain-5a416.firebaseapp.com",
    databaseURL: "https://alpharain-5a416-default-rtdb.firebaseio.com",
    projectId: "alpharain-5a416",
    storageBucket: "alpharain-5a416.appspot.com",
    messagingSenderId: "...",
    appId: "..."
};

// Inicializa Firebase y obtiene referencia a la base de datos
firebase.initializeApp(firebaseConfig);
const database = firebase.database();

// Valores mínimos y máximos para normalizar los datos de entrada
const minValues = [20.0, 40.2, 13987.0, 1760.0];
const maxValues = [28.5, 62.0, 28422.0, 41930.0];

// PESOS DE LA IA 
// Pesos pre-entrenados del modelo de IA (red neuronal)
const modelWeights = [[[-0.05979084223508835, 0.5715795159339905, -0.34228822588920593, -0.074520044028759, 0.33825188875198364, 0.34794163703918457, 0.10634637624025345, 0.6617123484611511, -0.41693753004074097, 0.5983098745346069, 0.16923289000988007, -0.36438268423080444, -0.34673771262168884, 0.06790727376937866, 0.24336852133274078, -0.0408039465546608], [0.22568374872207642, -0.2100968062877655, -0.3460797071456909, -0.2744828760623932, -0.014240221120417118, -0.3833315670490265, 0.45946815609931946, -0.00956421997398138, 0.4040170907974243, 0.6027729511260986, -0.3182410001754761, -0.37781357765197754, -0.3716205954551697, 0.16067752242088318, -0.38873663544654846, 0.06796938925981522], [0.20006798207759857, -0.11110953241586685, 0.2368844747543335, -0.546954870223999, -0.10854757577180862, -0.005539590027183294, 0.626287579536438, -0.080072782933712, 0.1796364039182663, 0.3357943594455719, -0.39744552969932556, -0.218144029378891, 0.0019314885139465332, -0.03605547547340393, -0.08344726264476776, -0.4389459788799286], [-0.4035419225692749, -0.15278656780719757, -0.08893996477127075, 0.26386094093322754, 0.2763340175151825, 0.40286940336227417, 0.3292123079299927, 0.11072609573602676, -0.30275431275367737, 0.6975634098052979, 0.24768827855587006, 0.2703405022621155, 0.1310829520225525, 0.5827627182006836, 0.23754534125328064, 0.4472370743751526]], [-0.04619664326310158, -0.0029373487923294306, 0.0, -0.09898106008768082, 0.040599044412374496, 0.18202701210975647, 0.11314140260219574, -3.834743984043598e-05, 0.17986354231834412, 0.05856186896562576, 0.2176455408334732, 0.0, 0.0, -0.20302464067935944, 0.04616059735417366, -0.19635260105133057], [[-0.07136423885822296, -0.24506115913391113, -0.22917184233665466, -0.436021089553833, 0.4650278687477112, 0.2605525255203247, -0.2204880714416504, -0.07890725135803223], [0.2790707051753998, -0.18687637150287628, 0.10452788323163986, -0.37433481216430664, 0.18561625480651855, 0.31985947489738464, -0.43150389194488525, -0.6867457628250122], [-0.30133628845214844, 0.375685453414917, -0.3997199535369873, -0.4842798709869385, 0.06622791290283203, 0.12036776542663574, 0.46183979511260986, -0.42487311363220215], [-0.013504520989954472, 0.054113272577524185, -0.3663839101791382, 0.0877922773361206, -0.1715935468673706, 0.10433518141508102, -0.230066180229187, -0.14551860094070435], [0.3098948895931244, 0.2570991814136505, -0.035280559211969376, 0.04689013957977295, -0.21036317944526672, -0.21265830099582672, -0.49035656452178955, 0.2616833746433258], [0.6081467866897583, -0.0429253987967968, 0.26900163292884827, 0.19291043281555176, 0.22903217375278473, 0.2805030643939972, 0.13688921928405762, 0.3910267949104309], [0.45957306027412415, 0.06902507692575455, 0.21076832711696625, -0.3766601085662842, 0.009108874015510082, -0.17004282772541046, -0.441692590713501, -0.023983946070075035], [0.44749709963798523, -0.41989076137542725, -0.13331782817840576, -0.15185344219207764, -0.12542188167572021, -0.023743389174342155, -0.42719578742980957, -0.6623854637145996], [0.28612086176872253, 0.33475932478904724, -0.4767288863658905, -0.3881814479827881, 0.5698044300079346, -0.2635006904602051, 0.32147717475891113, 0.34240466356277466], [0.4242570698261261, 0.23307862877845764, -0.2571542263031006, -0.4243948459625244, -0.1993899941444397, -0.3536655008792877, -0.3511255979537964, -0.162596195936203], [0.24820774793624878, 0.543392539024353, -0.00178729894105345, -0.08354556560516357, -0.20802021026611328, -0.1807500123977661, 0.28849828243255615, 0.37498605251312256], [0.4865671396255493, -0.20032775402069092, -0.30005717277526855, -0.2526785135269165, -0.01677072048187256, -0.03961610794067383, -0.026816129684448242, -0.23260164260864258], [-0.09776568412780762, 0.29240214824676514, 0.11045503616333008, -0.4492499828338623, 0.3427778482437134, -0.057048916816711426, 0.45118701457977295, -0.20397555828094482], [-0.41499969363212585, 0.49303799867630005, -0.18975375592708588, -0.06611490249633789, 0.8148499727249146, -0.03775814548134804, -0.34643256664276123, -0.07081551104784012], [0.14225436747074127, -0.5123583674430847, -0.1264159083366394, -0.18035423755645752, -0.28673887252807617, 0.36448222398757935, 0.06915867328643799, 0.0016917720204219222], [0.10084470361471176, -0.45102742314338684, 0.2774047255516052, 0.28164708614349365, -0.6175473928451538, -0.523589015007019, 0.38931310176849365, 0.17978410422801971]], [0.08264708518981934, 0.046894870698451996, -0.06072354316711426, 0.0, 0.08863052725791931, -0.08540377020835876, 0.0, 0.08628477156162262], [[0.5600793361663818], [-0.7361377477645874], [-0.5763676762580872], [0.17475247383117676], [-0.4801570773124695], [-0.3169325590133667], [0.2954254150390625], [-0.5115208625793457]], [0.08188151568174362]]

// 4. ELEMENTOS DEL HTML 
// Obtiene referencias a los elementos del DOM para mostrar datos
const statusElem = document.getElementById('status');
const tempElem = document.getElementById('temp-actual');
const humElem = document.getElementById('hum-actual');
const aireElem = document.getElementById('aire-actual');
const luzElem = document.getElementById('luz-actual');
const predElem = document.getElementById('prediccion-temp');
const timeElem = document.getElementById('timestamp');

// LÓGICA PRINCIPAL 
// Función principal asincrónica
async function main() {
    // Indica que se está creando el modelo
    statusElem.textContent = 'Creando modelo de IA...';
    
    // Crea el modelo secuencial de TensorFlow.js
    const model = tf.sequential();
    model.add(tf.layers.dense({inputShape: [4], units: 16, activation: 'relu'}));
    model.add(tf.layers.dense({units: 8, activation: 'relu'}));
    model.add(tf.layers.dense({units: 1}));
    
    // Carga los pesos pre-entrenados al modelo
    const weightTensors = modelWeights.map(w => tf.tensor(w));
    model.setWeights(weightTensors);

    statusElem.textContent = 'Modelo creado. Esperando datos...';
    console.log('Modelo de IA creado y pesos cargados.');

    // Escucha la última lectura en la base de datos
    const lecturasRef = database.ref('lecturas').orderByKey().limitToLast(1);
    lecturasRef.on('value', (snapshot) => {
        if (!snapshot.exists()) return;
        const lastKey = Object.keys(snapshot.val())[0];
        const latestData = snapshot.val()[lastKey];
        
        // Actualiza la UI con los datos recibidos
        tempElem.textContent = `${latestData.temperatura} °C`;
        humElem.textContent = `${latestData.humedad} %`;
        aireElem.textContent = latestData.calidad_aire;
        luzElem.textContent = latestData.luz;
        timeElem.textContent = `Última lectura: ${latestData.timestamp}`;

        // Prepara los datos para la predicción
        const inputData = [
            parseFloat(latestData.temperatura),
            parseFloat(latestData.humedad),
            parseInt(latestData.calidad_aire),
            parseInt(latestData.luz)
        ];
        // Normaliza los datos
        const scaledData = inputData.map((value, i) => (value - minValues[i]) / (maxValues[i] - minValues[i]));
        const inputTensor = tf.tensor2d([scaledData]);
        // Realiza la predicción con el modelo
        const predictionTensor = model.predict(inputTensor);
        const predictionScaled = predictionTensor.dataSync()[0];
        // Desnormaliza el resultado para mostrarlo en °C
        const tempMin = minValues[0]; const tempMax = maxValues[0];
        const predictionReal = (predictionScaled * (tempMax - tempMin)) + tempMin;
        predElem.textContent = `${predictionReal.toFixed(1)} °C`;
        statusElem.textContent = 'Predicción actualizada.';
    });
}

// Ejecuta la función principal
main();
